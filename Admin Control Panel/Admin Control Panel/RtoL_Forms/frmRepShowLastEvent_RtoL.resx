<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="tsbPrint.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>